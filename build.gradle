//buildscript { // CLR:PM
//  repositories {
//    maven {
//      url "https://maven.google.com"
//    }
//    google()
//    jcenter()
//  }
//  dependencies {
//    classpath 'com.android.tools.build:gradle:4.2.0-rc01'
//    classpath 'com.google.gms:google-services:4.3.5'
//    // classpath 'androidx.test.uiautomator:uiautomator:2.2.0'
//  }
//}

plugins {
  id 'com.android.library'
  id 'kotlin-android'

//  id 'androidx.navigation.safeargs.kotlin'
  id 'androidx.navigation.safeargs'
  id 'kotlin-parcelize'  // to send safeArgs between different fragments we must parcelize
//  id 'kotlin-kapt'  // annotation processor // CLR:PM
//  id 'dagger.hilt.android.plugin' // dependency injection

  id 'maven-publish' // CHECK:PM needed for jitpack.io?
}

repositories {
  mavenCentral()
  google()
//  maven {
//    url 'https://jitpack.io'
//  } // CLR? is publishing ok?
  mavenCentral()
  // TODO once easypermissions is migrated to mavenCentral remove the below
  jcenter()
}

android {
  compileSdkVersion 30
  buildToolsVersion "30.0.2"

  defaultConfig {
    minSdkVersion 28
    //noinspection OldTargetApi,ExpiredTargetSdkVersion
    targetSdkVersion 30
    versionCode 1
    versionName "1.1"

    // testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    consumerProguardFiles 'consumer-rules.pro'
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }
  packagingOptions {
    exclude 'META-INF/DEPENDENCIES'
  }
  buildFeatures {
    // dataBinding true
    viewBinding true
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  kotlinOptions {
    jvmTarget = '1.8'
  }
}



dependencies {
  // CORE
  //// KOTLIN
  //  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$ver_kotlin" CLR
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$ver_kotlin"
  implementation "androidx.core:core-ktx:1.3.2"
  //// UI/Compatibility
  implementation 'androidx.appcompat:appcompat:1.2.0'
  implementation 'com.google.android.material:material:1.3.0'
  implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
  //// LIFECYCLE (without ViewModel or LiveData)
  implementation "androidx.lifecycle:lifecycle-runtime-ktx:$ver_lifecycle"
  implementation "androidx.lifecycle:lifecycle-service:$ver_lifecycle"
  //// UI NAVIGATION
  implementation "androidx.navigation:navigation-fragment-ktx:$ver_nav_ui"
  implementation "androidx.navigation:navigation-ui-ktx:$ver_nav_ui"

  //// COROUTINES
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$ver_coroutines"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$ver_coroutines"
  //// DEPENDENCY INJECTION (dagger/hilt) CHECK:PM remove hilt/dagger
//  implementation "com.google.dagger:hilt-android:$hilt_version"
//  kapt "com.google.dagger:hilt-compiler:$hilt_version"
  /////// this were recently updated/released
//  implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
//  kapt "androidx.hilt:hilt-compiler:1.0.0-beta01"

  // GOOGLE SERVICES
  //// FusedLocation (coarse/fine grain)
  implementation 'com.google.android.gms:play-services-location:18.0.0'
  //// GOOGLE MAPS & UTILS
  implementation 'com.google.android.gms:play-services-maps:17.0.0'
  implementation 'com.google.maps.android:android-maps-utils:2.2.2' // updated from 0.3 !

  // MISC
   implementation 'com.vmadalin:easypermissions-ktx:0.1.0'

  /////////////////
  // ANYPLACE CORE (java lib)
  implementation 'com.github.dmsl:anyplace-lib-core:4.0.2'
  // local include requires pulling the submodules (see README)
  // implementation project(path: ':lib-core') // local

  implementation 'gov.nist.math:jama:1.0.3'

//  implementation 'com.google.api-client:google-api-client:1.31.4'
//  implementation 'com.google.http-client:google-http-client:1.39.2'
//  implementation 'google-http-client-jackson2'
  implementation 'com.google.http-client:google-http-client-jackson2:1.39.2'
//  implementation 'com.google.http-client:google-http-client:1.39.2'

//  implementation 'com.google.http-client:google-http-client:1.39.2'

  implementation 'com.google.code.gson:gson:2.8.6'
  implementation 'org.apache.httpcomponents:httpmime:4.5.13'
  // implementation group: 'gov.nist.math', name: 'jama', version: '1.0.3' CLR
  // implementation group: 'com.google.api-client', name: 'google-api-client', version: '1.30.10'
  // implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'


  // TODO Google Sign-In
  // implementation 'com.google.android.gms:play-services-auth:19.0.0'

  // FLIR
  // TODO:PM move on LASH app?
  implementation files('libs/flir/androidsdk-release.aar')
  implementation files('libs/flir/thermalsdk-release.aar')
//  implementation(name: 'flir-androidsdk-release', ext: 'aar')
//  implementation(name: 'flir-thermalsdk-release', ext: 'aar')
  //  api fileTree(include: ['*.aar'], dir: 'libs')
  //  implementation files('libs/flir-thermalsdk-release.aar')
  //  implementation files('libs/flir-androidsdk-release.aar')
  //  implementation fileTree(dir: "libs", include: // CLR?
  //          ["flir-androidsdk-release.aar"],
  //          ["flir-thermalsdk-release.aar"])

  // TESTING
  // testImplementation 'junit:junit:4.12'
  // androidTestImplementation 'androidx.test.ext:junit:1.1.1'
  // androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
}

/** JitPack Publishing: **/
// Because the components are created only during the afterEvaluate phase,
// publications must use the afterEvaluate() lifecycle method.
def GROUP = 'com.github.dmsl'
def ARTIFACT_ID="anyplace-lib-android"
def VERSION_NAME="4.1.0"

afterEvaluate {
  publishing {
    publications {
      release(MavenPublication) {  // Creates a Maven publication called "release".
        from components.release   // Applies the component for the release build variant.
        groupId = GROUP
        artifactId = ARTIFACT_ID
        version = VERSION_NAME
      }
      debug(MavenPublication) {  // Creates a Maven publication called “debug”.
        from components.debug    // Applies the component for the debug build variant.
        groupId = GROUP
        artifactId = ARTIFACT_ID
        version = VERSION_NAME
      }
    }
  }
}